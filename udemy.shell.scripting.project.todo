
Resume Linux Shell Scripting Udemy course
Linux Shell Scripting: A Project-Based Approach to Learning
https://www.udemy.com/course/linux-shell-scripting-projects/




✔ Begin Section 3 User and account creation Shell Scripting Project 1. @done(23-01-20 14:00)
	☐ Section 11 section introduction
	☐ Section 12 getting started with shell scripting
	☐ Section 13 special variables, pseudocode, command substituion, if conditionals
	☐ Section 14 exit statuses, return codes, string test conditionals
	☐ Section 15 reading standard input, creating accounts, username conventions
	☐ Section 16 exercise 2 instructions
	☐ Section 17 exercise 2 walkthrough
--

✔ Section 2: @done(23-01-20 13:59)
	✔ S3-S10 @done(23-01-20 13:59)
	Creating a Local Linux Shell scripting environment
	✔ Follow setup how to install and configure local vagrant box: @done(23-01-20 08:14)
		✔ file:///home/erimendz/Downloads/Exercise-01-CreatingaLocalLabEnvironment.pdf @done(23-01-20 08:14)
		Error msg running virtualbox:
			dnf install akmod-VirtualBox kernel-devel-6.0.18-300.fc37.x86_64
           akmods --kernels 6.0.18-300.fc37.x86_64 && systemctl restart vboxdrv.service
		   sudo systemctl restart vboxdrv.service
			Job for vboxdrv.service failed because the control process exited with error code.
			See "systemctl status vboxdrv.service" and "journalctl -xeu vboxdrv.service" for details.
Update:
	The above errors are resolved after a reboot of the machine but ONLY after install virtualbox package using dnf.
	Running vagrant up in the required directory gives the following messages:
		bash ➜ vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==> default: Importing base box 'jasonc/centos7'...
==> default: Matching MAC address for NAT networking...
==> default: Checking if box 'jasonc/centos7' version '1.4.4' is up to date...
==> default: Setting the name of the VM: testbox01_default_1674195452123_14833
Vagrant is currently configured to create VirtualBox synced folders with
the `SharedFoldersEnableSymlinksCreate` option enabled. If the Vagrant
guest is not trusted, you may want to disable this option. For more
information on this option, please refer to the VirtualBox manual:

  https://www.virtualbox.org/manual/ch04.html#sharedfolders

This option can be disabled globally with an environment variable:

  VAGRANT_DISABLE_VBOXSYMLINKCREATE=1

or on a per folder basis within the Vagrantfile:

  config.vm.synced_folder '/host/path', '/guest/path', SharedFoldersEnableSymlinksCreate: false
==> default: Clearing any previously set network interfaces...
==> default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
==> default: Forwarding ports...
    default: 22 (guest) => 2222 (host) (adapter 1)
==> default: Booting VM...
==> default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2222
    default: SSH username: vagrant
    default: SSH auth method: private key
    default: 
    default: Vagrant insecure key detected. Vagrant will automatically replace
    default: this with a newly generated keypair for better security.
    default: 
    default: Inserting generated public key within guest...
    default: Removing insecure key from the guest if it's present...
    default: Key inserted! Disconnecting and reconnecting using new SSH key...
==> default: Machine booted and ready!
==> default: Checking for guest additions in VM...
    default: The guest additions on this VM do not match the installed version of
    default: VirtualBox! In most cases this is fine, but in rare cases it can
    default: prevent things such as shared folders from working properly. If you see
    default: shared folder errors, please make sure the guest additions within the
    default: virtual machine match the version of VirtualBox you have installed on
    default: your host and reload your VM.
    default: 
    default: Guest Additions Version: 5.2.6
    default: VirtualBox Version: 7.0
==> default: Mounting shared folders...
    default: /vagrant => /home/erimendz/shellclass.udemy/testbox01

Notes:
	✔ Installed the Archlinux iso 2023 with Virtualbox. @done(23-01-20 09:29)
	✔ Result success @done(23-01-20 09:30)
	✔ Password for vagrant ssh both user and root is *vagrant* @done(23-01-20 11:48)
	Edit Vagrantfile to add private ip network that is *within* the allowed network range else vagrant will complain:
		The IP address configured for the host-only network is not within the
		allowed ranges. Please update the address used to be within the allowed
		ranges and run the command again.

		Address: 192.168.8.130
		Ranges: 192.168.56.0/21

		Valid ranges can be modified in the /etc/vbox/networks.conf file. For
		more information including valid format see:

		https://www.virtualbox.org/manual/ch06.html#network_hostonly
	After edit and saving the file run vagrant reload to restart the VM:
		`vagrant reload`
		`vagrant destroy` removes the VM aka totally destroyed
		note: i will not destroy this testbox01 vm *for now*
		bash ➜ vagrant global-status --prune

		id       name    provider   state   directory                                 
		------------------------------------------------------------------------------
		4470883  default virtualbox running /home/erimendz/shellclass.udemy/testbox01 
		
		The above shows information about all known Vagrant environments
		on this machine. This data is cached and may not be completely
		up-to-date (use "vagrant global-status --prune" to prune invalid
		entries). To interact with any of the machines, you can go to that
		directory and run Vagrant, or you can use the ID directly with
		Vagrant commands from any directory. For example:
		"vagrant destroy 1a2b3c4d"
Note:
	✔ From inside the VM you can access files in the project directory via the folder /vagrant, e.g. you can put files *when outside the vm* and then when inside the VM you can access the files @done(23-01-20 13:26)

	`vagrant halt` halts the VM that is active in the current directory, like so:
		bash ➜ vagrant status
		Current machine states:

		test1                     poweroff (virtualbox)
		test2                     poweroff (virtualbox)

		This environment represents multiple VMs. The VMs are all listed
		above with their current state. For more information about a specific
		VM, run `vagrant status NAME`.
	`vagrant global-status` gives the overall status of VMs in the project directory NOT only in the local folder.
	Good section for troubleshooting:
		https://www.udemy.com/course/linux-shell-scripting-projects/learn/lecture/7980812#questions

